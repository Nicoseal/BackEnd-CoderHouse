</div>
<script>
    let socket = new io();

    const user = new normalizr.schema.Entity('authors');
    const messageSchema = new normalizr.schema.Entity('message', {
        author: user
    });
    const messagesSchema = new normalizr.schema.Entity('messages', {
        messages: [messageSchema]
    });

    let form_send_msj = document.getElementById("send_message");
    let chat_box = document.getElementById("message_box");

    socket.on("init", data => {
        reload_products(data[0]);
        reload_messages(data[1]);
    });

    socket.on("reload_products", data => reload_products(data));
    socket.on("reload_messages", data => reload_messages(data));
    socket.on("error", data => alert(data));

    form_send_msj.addEventListener("submit", e => {
        e.preventDefault();
        let message = {
            author: {
                id: e.target[0].value,
                nombre: e.target[1].value,
                apellido: e.target[2].value,
                edad: e.target[3].value,
                alias: e.target[4].value,
                avatar: e.target[5].value,
            },
            text: e.target[6].value,
        }
        if(message.author.id == "" || message.text == "") window.location.reload();
        chat_box.value = "";
        socket.emit("new_message", message);
    })

    /* Aqui se podria agregar un evento en el cual el usuario al desconectarse se actualice
    su estado a inactivo en el controlador, no lo agrego debido a que no hay verificacion de contrase√±a futura*/

    function reload_products(data) {
        let table = "<h3>Lista de productos</h3><hr>"
        if(data.length > 0) {
            table += `
            <table class="table table-striped">
            <thead>
              <tr>
                <th scope="col">Id</th>
                <th scope="col">Titulo</th>
                <th scope="col">Precio</th>
                <th scope="col">Imagen</th>
              </tr>
            </thead>
            <tbody>`
            for(product of data) {
                table += 
                `<tr>
                    <th>${product.id}</th>
                    <th>${product.title}</th>
                    <th>${product.price}</th>
                    <th><img src="${product.thumbnail}" alt="${product.title}" class="img-thumbnail"></th>
                </tr>`
            }
            table += `</tbody></table>`
        } else {
            table += `<p class="alert alert-danger">No hay productos</p>`
        }
        table_prods.innerHTML = table;
    }

    function reload_messages(data) {
        let percentage = data.compression;
        let normalized = data.value;
        let de_normalized = normalizr.denormalize(normalized.result, messagesSchema, normalized.entities);
        let text = ""
        if(de_normalized.messages != null) {
            for(msj of de_normalized.messages) {
                text += `<b style="color: blue;">${msj.author.id}</b> <span style="color: brown;">[${msj.date}]:</span> <i style="color: green;">${msj.text}</i><br>`
            }
        } else {
            text = `<p class="alert alert-danger">Todavia no hay mensajes</p>`
        }
        reload_compression(percentage);
        chat.innerHTML = text;
    }

    function reload_compression(data) {
        let text = "Compresion: "
        if(data != null) {
            text += data;
            text += "%";
        } else {
            text += "0%"
        }
        compression_box.innerHTML = text;
    }
</script>
</body>
</html>